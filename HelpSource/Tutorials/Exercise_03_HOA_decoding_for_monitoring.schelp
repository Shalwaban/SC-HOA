title:: HOA Tutorial Exercise 03
summary:: Listening (headphone decoding) of b-format soundfiles.
categories:: Libraries>HOA
related:: Guides/HOAguide, Guides/HOAguide


The examples below show how to monitor the playback of HOA b-format via headphones.
Use for this purpose the spehrical decoders on Lebedv Grids
link:: https://en.wikipedia.org/wiki/Lebedev_quadrature:: .


code::
// start the sound server we will configure it first
s.quit
(
ServerOptions.devices;
s = Server.local;
Server.local = Server.default;
o = Server.local.options; // Get the local server's options
o.numInputBusChannels = 2; // Set Input to number of Inputs
o.numOutputBusChannels = 36; // lets start after chan 36 so as not to see the mic input
o.numAudioBusChannels = 2048;
o.blockSize = 512;
o.numWireBufs = 1024 * 16;
o.memSize = 2.pow(18);
o.sampleRate = 48000;
s.makeWindow;
s.boot;
)

(
~order = 4;
~hoaNumChannels = (~order+1).pow(2);
// make an oszilloscope showing all the channels for the order from above
s.scope(~hoaNumChannels);
)

// Let's make a node that generates a HOA signal ( white noise ) control the direction with the mouse.
// we won't see it since we don't monitor it.
(
~hoaSignal = NodeProxy.new(s, \audio, ~hoaNumChannels);
~hoaSignal.source = {HOAEncPan.ar(~order, WhiteNoise.ar(1), MouseX.kr(0, 360), MouseY.kr(-90, 90 ) )};
~hoaSignal.fadeTime = 1;
)

// Let's make a node that can take in (multichannel) HOA signals.
(
~decoder = NodeProxy.new(s, \audio, 26);
~decoder.source = {var in; in = \in.ar(0!(~hoaNumChannels)); in};
~decoder.fadeTime = 1;
~decoder.play(0, 26);
)

// still we don't see anything in the scope because ~hoaSignal  and ~decoder are not connected yet
~hoaSignal <>> ~decoder;  // now you see in the scope the ~hoaSignal going untransformed through ~decoder

// Here is where the advantages of proxyspace with Ambisonics come is handy.
// Lets change the  NodeProxies one step at a time
// First the ~hoaSignal itself
~hoaSignal.source = {HOAEncPan.ar(~order, SinOsc.ar(48000 / 1024), MouseX.kr(0, 360), MouseY.kr(-90, 90 ) )};
~hoaSignal.source = {HOAEncPan.ar(~order, WhiteNoise.ar(1), MouseX.kr(0, 360), MouseY.kr(-90, 90 ) )};

// Then the decoder, first we decode into a Lebedev Grid with 26 positions, which is enough points for order 3
s.scope(26); // lets see all channels
~decoder.source = {var in; in = \in.ar(0!~hoaNumChannels); HOADecLebedev26.ar(3, in, output_gains: 24) };

// now let's load HRIR filters for each of the 26 channels
HOADecLebedev26.loadHrirFilters(s);
HOADecLebedev26.hrirFilters.size;
// and change the decoder.source again
~decoder.source = {var in; in = \in.ar(0!~hoaNumChannels); HOADecLebedev26.ar(3, in, hrir_Filters:1) };

// now you might want to change the HOA signal again to hear something
~hoaSignal.source = {HOAEncPan.ar(~order, SinOsc.ar(48000 / 64), MouseX.kr(0, 360), MouseY.kr(-90, 90 ) )};
~hoaSignal.source = {HOAEncPan.ar(~order, WhiteNoise.ar(1), MouseX.kr(0, 360), MouseY.kr(-90, 90 ) )};
::