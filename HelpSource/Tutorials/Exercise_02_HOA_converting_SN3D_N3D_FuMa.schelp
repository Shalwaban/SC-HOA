title:: HOA Tutorial Exercise 02
summary:: Converting between N3D, SN3D, and FuMa.
categories:: Libraries>HOA
related:: Guides/HOAguide, Guides/HOAguide


The examples below show the difference of the three b-format conventions with respect to channel ordering (ACN, FuMa) and normalization (N3D, SN3D, and MaxN)

The HOA library defaults to the ACN channel oder convention.
In the ACN order N3D and SN3D is typically used for normalization.
The HOA library defauts to N3D.
N3D has the advantage that all signals are orthonormal.
SN3D has the advantage that none of the higher order signals exceeds the level of the the W channel.

For FuMa channel ordering the MaxN normalization is used (with the exception of a -3dB correction factor for the W channel).

See also: link:: https://en.wikipedia.org/wiki/Ambisonic_data_exchange_formats#Normalisation::.

Channel numbers and names up to order 3:
table::
    ## ACN   || FuMa || name
    ##    0     || 0       || W
    ##    1     || 2       || Y
    ##    2     || 3       || Z
    ##    3     || 1       || X
    ##    4     || 8       || V
    ##    5     || 6       || T
    ##    6     || 4       || R
    ##    7     || 5       || S
    ##    8     || 7       || U
    ##    9     || 15     || Q
    ##    10   || 13     || O
    ##    11   || 11     || M
    ##    12   || 9       || K
    ##    13   || 10     || L
    ##    14   || 12     || N
    ##    15   || 14     || P
::


code::
// start the sound server
s.boot

(
// try different orders up to 5
~order = 5;
~hoaNumChannels = (~order+1).pow(2);
// make an oszilloscope showing all the channels for the order from above
s.scope(~hoaNumChannels);
)

// Let's use proxies for this:
~hoaSignal = NodeProxy.new(s, \audio, ~hoaNumChannels);
~hoaSignal.source = {HOAEncPan.ar(~order, WhiteNoise.ar(1), 45, 45 )};
~hoaSignal.fadeTime = 1;
~hoaSignal.play(0, ~hoaNumChannels);

// select in and out Format
~inFormat =;
~outFormat =;

// and evaluate the new source of the proxy
~hoaSignal.source = {HOAConvert.ar(~order,  HOAEncPan.ar(~order, WhiteNoise.ar(1), 45, 45 ), ~inFormat, ~outFormat)}
::
