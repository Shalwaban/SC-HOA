title:: HOA Tutorial Exercise 08
summary:: Recording the b-format within the proxy space.
categories:: Libraries>HOA
related:: Guides/HOAguide, Guides/HOAguide


The example below shows how to record the b-format within the proxy space.

code::
s.quit
(
ServerOptions.devices;
s = Server.local;
Server.local = Server.default;
o = Server.local.options; // Get the local server's options
o.numInputBusChannels = 2; // Set Input to number of Inputs
o.numOutputBusChannels = 36; // lets start after chan 36 so as not to see the mic input
o.numAudioBusChannels = 2048;
o.blockSize = 512;
o.numWireBufs = 1024 * 16;
o.memSize = 2.pow(18);
o.sampleRate = 48000;
s.makeWindow;
s.boot;
)

(
~order = 3;
~hoaNumChannels = (~order+1).pow(2);
// make an oszilloscope showing all the channels for the order from above
s.scope(2);
)

// Let's make a node that picks up the SoundIn (microphone) and spatializes it in a  HOA signal
// we spatialize it a spherical wave and we have it move vertically and change the distance with oscillators
(
~hoaSignal = NodeProxy.new(s, \audio, ~hoaNumChannels);
~hoaSignal.source = {HOAEncPan.ar(~order, SoundIn.ar(0), // this picks up the Microphone
	                                                                                   0,  // no azimuth movement
	                                                     SinOsc.ar(0.3, 0, 90 ),  // changing elevation
	                                                           plane_spherical:1,  // we want it to be a spherical wave
	                                          radius:SinOsc.ar(0.4, 0, 2, 2 )  // and change the radius
                                 )};
~hoaSignal.fadeTime = 1;
)

// Then we make a node that spatializes this signal in the x/y plane
// This is the node that we want to record from, that's why we use a RecNodeProxy
(
~hoaTransformer =  RecNodeProxy.new(s, \audio, ~hoaNumChannels);
~hoaTransformer.source = {var in; in = \in.ar(0!~hoaNumChannels); HOATransRotateAz.ar(~order, in,  SinOsc.ar(0.5, 0, 180, 180 )  ) };
~hoaTransformer.fadeTime = 1;
)

// Let's make a node to decode and listen.
HOADecLebedev26.loadHrirFilters(s);
(
~decoder = NodeProxy.new(s, \audio, 2);
~decoder.source = {var in; in = \in.ar(0!~hoaNumChannels); HOADecLebedev26.ar(3, in, hrir_Filters:1) };
~decoder.fadeTime = 1;
~decoder.play(0, 2);
)

// and we connect them
~hoaSignal <>> ~hoaTransformer  <>>  ~decoder;

// open the recording file
~hoaTransformer.open( thisProcess.platform.userHomeDir++"/recordingTest.wav", "wav", "float" ); // lets record it in float
~hoaTransformer.record // start recording (paused)
~hoaTransformer.unpause // unpause
~hoaTransformer.pause // pause again
~hoaTransformer.close // close the file

// Normalize the resulting sound file
~buffer2Normalize = Buffer.read(s, thisProcess.platform.userHomeDir++"/recordingTest.wav");
~buffer2Normalize.normalize.write(thisProcess.platform.userHomeDir++"/recordingTestN.wav", "wav", "int16"); // and safe it as "int16" to safe space

// Now let's listen to the recorded sound file
~hoaSoundFile = Buffer.read(s, thisProcess.platform.userHomeDir++"/recordingTestN.wav");

// we change the ~hoaSignal.source to play back the sound file
~hoaSignal.source = { HPF.ar(PlayBuf.ar( ~hoaSoundFile.numChannels,  ~hoaSoundFile, loop:1  ), 100)   };
// and we want to just pass the signal through the transformer
~hoaTransformer.source = {var in; in = \in.ar(0!~hoaNumChannels); in };
::